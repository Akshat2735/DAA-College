#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int x, y;
} Point;

Point p0;

int compare(const void *vp1, const void *vp2) {
    Point *p1 = (Point *)vp1;
    Point *p2 = (Point *)vp2;

    int val = (p1->x - p0.x) * (p2->y - p0.y) - (p1->y - p0.y) * (p2->x - p0.x);
    if (val == 0)
        return (p1->x - p0.x) * (p1->x - p0.x) + (p1->y - p0.y) * (p1->y - p0.y) -
               (p2->x - p0.x) * (p2->x - p0.x) - (p2->y - p0.y) * (p2->y - p0.y);
    return (val > 0) ? -1 : 1;
}

int orientation(Point p, Point q, Point r) {
    int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    if (val == 0)
        return 0;
    return (val > 0) ? 1 : -1;
}

void convexHull(Point points[], int n) {
    int ymin = points[0].y, min = 0;
    for (int i = 1; i < n; i++) {
        if ((points[i].y < ymin) || (ymin == points[i].y && points[i].x < points[min].x)) {
            ymin = points[i].y;
            min = i;
        }
    }

    Point temp = points[0];
    points[0] = points[min];
    points[min] = temp;
    p0 = points[0];

    qsort(&points[1], n - 1, sizeof(Point), compare);

    Point hull[n];
    int hullSize = 0;
    
    for (int i = 0; i < n; i++) {
        while (hullSize >= 2 && orientation(hull[hullSize - 2], hull[hullSize - 1], points[i]) != -1)
            hullSize--;

        hull[hullSize++] = points[i];
    }

    printf("Convex Hull:\n");
    for (int i = 0; i < hullSize; i++)
        printf("(%d, %d)\n", hull[i].x, hull[i].y);
}

int main() {
    int n;
    printf("Enter number of points: ");
    scanf("%d", &n);

    Point points[n];
    printf("Enter %d points (x y):\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d %d", &points[i].x, &points[i].y);

    convexHull(points, n);

    return 0;
}


Sample Input & Output:
Enter number of points: 6
Enter 6 points (x y):
0 3
2 2
1 1
2 1
3 0
0 0
Convex Hull:
(0, 0)
(3, 0)
(2, 2)
(0, 3)

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    char data;
    int freq;
    struct Node *left, *right;
} Node;

typedef struct {
    Node *array[100];
    int size;
} MinHeap;

Node *createNode(char data, int freq) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->data = data;
    node->freq = freq;
    node->left = node->right = NULL;
    return node;
}

void swapNodes(Node **a, Node **b) {
    Node *temp = *a;
    *a = *b;
    *b = temp;
}

void minHeapify(MinHeap *heap, int idx) {
    int smallest = idx, left = 2 * idx + 1, right = 2 * idx + 2;
    if (left < heap->size && heap->array[left]->freq < heap->array[smallest]->freq)
        smallest = left;
    if (right < heap->size && heap->array[right]->freq < heap->array[smallest]->freq)
        smallest = right;
    if (smallest != idx) {
        swapNodes(&heap->array[idx], &heap->array[smallest]);
        minHeapify(heap, smallest);
    }
}

Node *extractMin(MinHeap *heap) {
    Node *temp = heap->array[0];
    heap->array[0] = heap->array[--heap->size];
    minHeapify(heap, 0);
    return temp;
}

void insertMinHeap(MinHeap *heap, Node *node) {
    int i = heap->size++;
    while (i && node->freq < heap->array[(i - 1) / 2]->freq) {
        heap->array[i] = heap->array[(i - 1) / 2];
        i = (i - 1) / 2;
    }
    heap->array[i] = node;
}

MinHeap *createMinHeap(int capacity) {
    MinHeap *heap = (MinHeap *)malloc(sizeof(MinHeap));
    heap->size = 0;
    return heap;
}

Node *buildHuffmanTree(char data[], int freq[], int n) {
    MinHeap *heap = createMinHeap(n);
    for (int i = 0; i < n; i++)
        heap->array[i] = createNode(data[i], freq[i]);
    heap->size = n;

    while (heap->size != 1) {
        Node *left = extractMin(heap);
        Node *right = extractMin(heap);
        Node *top = createNode('$', left->freq + right->freq);
        top->left = left;
        top->right = right;
        insertMinHeap(heap, top);
    }
    return extractMin(heap);
}

void printCodes(Node *root, int arr[], int top) {
    if (root->left) {
        arr[top] = 0;
        printCodes(root->left, arr, top + 1);
    }
    if (root->right) {
        arr[top] = 1;
        printCodes(root->right, arr, top + 1);
    }
    if (!root->left && !root->right) {
        printf("%c: ", root->data);
        for (int i = 0; i < top; i++)
            printf("%d", arr[i]);
        printf("\n");
    }
}

int main() {
    int n;
    printf("Enter number of characters: ");
    scanf("%d", &n);

    char data[n];
    int freq[n];

    printf("Enter characters and their frequencies:\n");
    for (int i = 0; i < n; i++)
        scanf(" %c %d", &data[i], &freq[i]);

    Node *root = buildHuffmanTree(data, freq, n);
    int arr[100];
    printf("Huffman Codes:\n");
    printCodes(root, arr, 0);

    return 0;
}


Sample Input & Output:
Enter number of characters: 4
Enter characters and their frequencies:
a 5
b 9
c 12
d 13
Huffman Codes:
c: 00
d: 01
a: 10
b: 11
